> Brute force란 조합 가능한 모든 문자열을 하나씩 대입해 보는 방식으로 암호를 해독하는 방법 - 나무위키

나무위키에서는 브루트 포스의 정의를 위와 같이 표현하고 있지만 알고리즘의 측면에서 본다면 완전 탐색 알고리즘이다. 
즉, 모든 경우의 수를 비교해보고 답을 찾아내는 알고리즘이다.

예를 들어 100이하의 숫자 중 % 3 계산을 했을 때 나머지가 1이 되는 숫자를 모두 찾아라 같은 문제가 있습니다. 1부터 100까지 모두 % 3 계산을 한 후 나머지가 1이 되는 경우를 찾으면 된다.

이렇게 단순한 알고리즘의 **장점**은 무엇이 있을까?

모든 경우의 수를 계산하고 비교해보기 때문에 정답을 찾을 확률이 100%이다. 또 구현이 다른 알고리즘에 비해 쉽다.

하지만 장점이 있는만큼 **단점**도 있다.

데이터 범위에 따라 시간이 오래 걸릴 수도 짧게 걸릴 수도 있다. 예를 들어 1부터 100까지의 합을 구하는 경우 컴퓨터는 굉장히 빠르게 계산을 할 것이다. 하지만 만약 1부터 1억까지의 합을 구할 경우에는 1부터 100까지의 합을 구하는 경우보다 더욱 많은 시간이 걸릴 것이다.

따라서 브루트 포스 사용할 때는 데이터의 범위가 작은 문제에 한해서 사용해야한다.

---

브루트 포스는 굉장히 간단한 알고리즘이기에 여기서 설명을 끝내겠다.

보안 분야에 많은 관심이 있는 사람으로서 브루트 포스 공격을 언급 안하고 넘어가면 아쉬울 것 같다.

브루트 포스 공격은 위 나무 위키에서 정의한 공격과 같다. 다른 말로는 무차별 대입 공격이라고도 한다.

또 대부분의 암호화 방식은 이론적으로 이런 무차별 대입 공격에 대해 안전하지 못하다.

그럼 **왜 암호화를 하는지 의문**이 생길 것이다.

이론적으로 무차별 대입 공격을 하면 언젠가 키를 찾아낼 수 있다. 하지만 키 길이에 따라 바로 찾을 수도 몇천년이 걸릴 수도 있다. 대부분의 암호화 방식은 이러한 시간적 문제로 인해 키를 찾을 수 없다. 반대로 시간적 문제가 해결 된다면 키를 찾기 쉬워진다. 예를 들어 RSA 암호화 방식은 현재 컴퓨터의 성능으로 키를 찾을 수 없다. 너무 많은 시간이 소요되기 때문이다. 하지만 양자컴퓨터가 개발된다면 많은 연구원들은 RSA 암호와 같은 비대칭키 암호화 방식들이 무용지물이 될 것으로 보고 있다. 위에서 말한 시간적 문제가 해결되었기 때문이다.
