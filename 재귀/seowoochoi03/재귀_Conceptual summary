> 컴퓨터 과학에 있어서 재귀(再歸, Recursion)는 자신을 정의할 때 자기 자신을 재참조하는 방법을 뜻하며, 이를 프로그래밍에 적용한 재귀 호출(Recursive call)의 형태로 많이 사용된다. 또 사진이나 그림 등에서 재귀의 형태를 사용하는 경우도 있다. - 위키백과
> 

쉽게 말하면 자기 자신이라는 문제에 자신(조금 더 작은 경우의 수)을 불러와서 원래보다 더 간단하게 문제를 풀 수 있도록 하는 방법이다.

사물을 예로 들자면 러시아 인형, 마트료시카를 말할 수 있을 것 같다.

이러한 **재귀를 코딩에서 어떻게 활용하면 되는 것일까?**

재귀의 의미와 같은 방식으로 활용하면 된다. 재귀를 쓰고자 할 때 자신의 함수 실행문을 넣어 계속 반복되게 하면 된다.

이렇게 설명을 하면 당연한 의문이 든다. 과연 **어디에서 반복문을 멈춰야 할까?**

자신의 하위 경우의 수가 base case에 도달했을 때 반복문을 끝내야 한다. base case 란 닶을 찾아 더 이상 자신을 호출할 필요가 없는 종료 case 라고 생각하면 된다. => 함수를 끝내는 조건

**재귀를 사용하게 되면 주의해야 할 점**이 있다. 이 점을 유의해서 코딩하도록 하자.

1. 재귀의 호출은 같은 문제 내에서 더 범위가 작은 값에 대해 이루어져야 한다.
2. 답을 얻었을 때는 반드시 base case를 걸어 재귀 함수를 끝낼 수 있어야 한다.

**반복문(for)과 재귀는 반복을 한다는 점에서 비슷한것 같은데 무슨 차이가 있는거지?**

반복문을 사용할 때 작성자(?)는 자신이 반복할 횟수를 알고 지정해서 사용한다. 반면 재귀 함수는 답이 나올 조건에 따라 반복 횟수가 달라지기 때문에 작성자도 반복 횟수를 알 수 없다.

반복문과 재귀는 반복을 한다는 점에서 같은 역할을 한다. 그럼 **굳이 재귀를 써야 하는 이유가 있을까?**

1. 알고리즘 자체가 재귀와 같이 자신을 반복해서 호출 할 경우
2. 변수 사용을 줄일 수 있다.
3. 가독성이 향상된다. (코드 길이를 줄일 수 있다.)

**재귀의 위험성**

재귀를 사용하면 함수를 반복해서 호출하게 된다. 이때의 입력값(매개변수), 결과값(리턴값), 다시 돌아갈 위치 등이 스택에 저장된다. 이렇게 매번 함수를 호출할 때마다 스택에 값을 저장한다. 함수를 단순 여러번에 걸쳐 호출하지 않고 무리하게 호출을 하게 되면 스택이 다 차버리는 '스택 오버플로우' 현상을 겪을 수 있다.

**꼬리 재귀**

위에 생긴 스택 오버플로우를 사전에 방지할 수 있는 재귀가 있다. 바로 '꼬리 재귀'. 꼬리재귀란 재귀 호출이 끝나면 결과만 바로 반환되도록 하는 방법이다.
